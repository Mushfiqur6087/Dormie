name: Deploy to Azure VM
on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AZ_HOST:       ${{ secrets.AZURE_VM_HOST }}
      AZ_USER:       ${{ secrets.AZURE_VM_USER }}
      DB_PASSWORD:   ${{ secrets.DB_PASSWORD }}
      JWT_SECRET:    ${{ secrets.JWT_SECRET }}

    steps:
      # 1. Checkout repo
      - uses: actions/checkout@v4

      # 2. Enable Buildx (needed for multi-stage build caching)
      - uses: docker/setup-buildx-action@v3

      # 3. Load SSH key for VM
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.AZURE_VM_SSH_PRIVATE_KEY }}

      # 4. Trust VM fingerprint
      - name: Add VM to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "$AZ_HOST" >> ~/.ssh/known_hosts

      # 5. Point Docker CLI at VM over SSH
      - name: Create remote Docker context
        run: |
          docker context create azure --docker "host=ssh://$AZ_USER@$AZ_HOST"
          docker context use azure

      # 6. Clean up any existing containers and build/deploy
      - name: Debug port usage
        run: |
          echo "Checking what's using port 80:"
          docker ps --filter "publish=80" || true
          echo "All running containers:"
          docker ps || true
          echo "System processes using port 80:"
          ss -tlnp | grep :80 || netstat -tlnp | grep :80 || true
          
      - name: Clean up existing deployment
        run: |
          # Stop and remove any existing containers (but keep volumes for data persistence)
          docker compose -f docker-compose.prod.yml down --remove-orphans || true
          
          # Clean up any nginx-related volumes that might be causing conflicts
          docker volume ls -q | grep -E "(nginx|conf)" | xargs -r docker volume rm || true
          
          # Stop the old hms-postgres container that's conflicting
          docker stop hms-postgres || true
          docker rm hms-postgres || true
          
          # Remove any containers that might be using port 80
          docker ps -q --filter "publish=80" | xargs -r docker stop || true
          docker ps -aq --filter "publish=80" | xargs -r docker rm || true
          
          # Remove any containers that might be using port 5432 (postgres)
          docker ps -q --filter "publish=5432" | xargs -r docker stop || true
          docker ps -aq --filter "publish=5432" | xargs -r docker rm || true
          
          # Clean up any dangling containers
          docker container prune -f || true
          
      - name: Build and deploy
        run: |
          export DB_PASSWORD="$DB_PASSWORD"
          export JWT_SECRET="$JWT_SECRET"
          export AZURE_VM_HOST="$AZ_HOST"
          
          docker compose -f docker-compose.prod.yml up --build -d

      # 7. Show container status
      - name: docker compose ps
        run: docker compose -f docker-compose.prod.yml ps

      # 8. Check nginx logs if it's failing
      - name: Check nginx logs
        run: |
          echo "Checking nginx container logs:"
          docker compose -f docker-compose.prod.yml logs nginx || true
          
      # 9. Show all container logs for debugging
      - name: Show all container logs
        if: failure()
        run: |
          echo "=== All container logs ==="
          docker compose -f docker-compose.prod.yml logs || true

      # 10. Always clean up context
      - name: Reset Docker context
        if: always()
        run: |
          docker context use default
          docker context rm azure
